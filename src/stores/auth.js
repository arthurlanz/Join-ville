// src/stores/auth.js
import { defineStore } from 'pinia';
import api from '@/services/api';

export const useAuthStore = defineStore('auth', {
  // 1. STATE: Inicializa o estado buscando dados do localStorage.
  state: () => ({
    accessToken: localStorage.getItem('accessToken') || null,
    user: JSON.parse(localStorage.getItem('user')) || null,
  }),

  // 2. GETTERS: Atalhos para dados computados.
  getters: {
    isAuthenticated: (state) => !!state.accessToken,
    // Retorna o tipo de usu√°rio ou null se n√£o estiver logado
    userType: (state) => state.user?.tipo_usuario || null,
  },

  // 3. ACTIONS: Fun√ß√µes que alteram o estado.
  actions: {
    // A√ß√£o chamada ap√≥s um login bem-sucedido
    setAuthData(loginResponse) {
      // Extrai os dados da resposta da sua API de login
      const { access, user } = loginResponse.data;

      this.accessToken = access;
      this.user = user;

    // Salva no localStorage para persistir a sess√£o
    localStorage.setItem('accessToken', access);
    localStorage.setItem('user', JSON.stringify(user));
    // üîë CORRE√á√ÉO: Salvando userType em MAI√öSCULAS
    localStorage.setItem('userType', user.tipo_usuario.toUpperCase());
},

    // A√ß√£o para fazer logout
    logout() {
      this.accessToken = null;
      this.user = null;

      // Limpa tudo do localStorage
      localStorage.removeItem('accessToken');
      localStorage.removeItem('user');
      localStorage.removeItem('userType');

      // Forma mais simples de redirecionar
      window.location.href = '/login';
    },

    // A√ß√£o para buscar dados do usu√°rio se tivermos o token mas n√£o o objeto 'user'
    async fetchUser() {
      if (this.accessToken && !this.user) {
        try {
          const response = await api.getCurrentUser();
          this.user = response.data;
          localStorage.setItem('user', JSON.stringify(this.user));
        } catch (error) {
          console.error('Sess√£o expirada. Fazendo logout.', error);
          this.logout();
        }
      }
    },
  },
});
